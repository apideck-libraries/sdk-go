// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/apideck-libraries/sdk-go/internal/utils"
)

// DataScopesResources2 - Wildcard indicating all resources and fields when Data Scopes is selected
type DataScopesResources2 string

const (
	DataScopesResources2Wildcard DataScopesResources2 = "*"
)

func (e DataScopesResources2) ToPointer() *DataScopesResources2 {
	return &e
}
func (e *DataScopesResources2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "*":
		*e = DataScopesResources2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataScopesResources2: %v", v)
	}
}

type DataScopesResources1 struct {
	// Whether the field can be read
	Read *bool `json:"read,omitempty"`
	// Whether the field can be written to
	Write *bool `json:"write,omitempty"`
}

func (d DataScopesResources1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DataScopesResources1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *DataScopesResources1) GetRead() *bool {
	if o == nil {
		return nil
	}
	return o.Read
}

func (o *DataScopesResources1) GetWrite() *bool {
	if o == nil {
		return nil
	}
	return o.Write
}

type DataScopesResourcesType string

const (
	DataScopesResourcesTypeMapOfMapOfDataScopesResources1 DataScopesResourcesType = "mapOfMapOfDataScopesResources1"
	DataScopesResourcesTypeDataScopesResources2           DataScopesResourcesType = "DataScopesResources_2"
)

// DataScopesResources - Data scopes resource configuration that can be either detailed field permissions or a wildcard
type DataScopesResources struct {
	MapOfMapOfDataScopesResources1 map[string]map[string]DataScopesResources1 `queryParam:"inline" name:"DataScopesResources"`
	DataScopesResources2           *DataScopesResources2                      `queryParam:"inline" name:"DataScopesResources"`

	Type DataScopesResourcesType
}

func CreateDataScopesResourcesMapOfMapOfDataScopesResources1(mapOfMapOfDataScopesResources1 map[string]map[string]DataScopesResources1) DataScopesResources {
	typ := DataScopesResourcesTypeMapOfMapOfDataScopesResources1

	return DataScopesResources{
		MapOfMapOfDataScopesResources1: mapOfMapOfDataScopesResources1,
		Type:                           typ,
	}
}

func CreateDataScopesResourcesDataScopesResources2(dataScopesResources2 DataScopesResources2) DataScopesResources {
	typ := DataScopesResourcesTypeDataScopesResources2

	return DataScopesResources{
		DataScopesResources2: &dataScopesResources2,
		Type:                 typ,
	}
}

func (u *DataScopesResources) UnmarshalJSON(data []byte) error {

	var mapOfMapOfDataScopesResources1 map[string]map[string]DataScopesResources1 = map[string]map[string]DataScopesResources1{}
	if err := utils.UnmarshalJSON(data, &mapOfMapOfDataScopesResources1, "", true, nil); err == nil {
		u.MapOfMapOfDataScopesResources1 = mapOfMapOfDataScopesResources1
		u.Type = DataScopesResourcesTypeMapOfMapOfDataScopesResources1
		return nil
	}

	var dataScopesResources2 DataScopesResources2 = DataScopesResources2("")
	if err := utils.UnmarshalJSON(data, &dataScopesResources2, "", true, nil); err == nil {
		u.DataScopesResources2 = &dataScopesResources2
		u.Type = DataScopesResourcesTypeDataScopesResources2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DataScopesResources", string(data))
}

func (u DataScopesResources) MarshalJSON() ([]byte, error) {
	if u.MapOfMapOfDataScopesResources1 != nil {
		return utils.MarshalJSON(u.MapOfMapOfDataScopesResources1, "", true)
	}

	if u.DataScopesResources2 != nil {
		return utils.MarshalJSON(u.DataScopesResources2, "", true)
	}

	return nil, errors.New("could not marshal union type DataScopesResources: all fields are null")
}
