// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/apideck-libraries/sdk-go/internal/utils"
)

// Two - Wildcard indicating all resources and fields when Data Scopes is disabled
type Two string

const (
	TwoWildcard Two = "*"
)

func (e Two) ToPointer() *Two {
	return &e
}
func (e *Two) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "*":
		*e = Two(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Two: %v", v)
	}
}

type One struct {
	// Whether the field can be read
	Read *bool `json:"read,omitempty"`
	// Whether the field can be written to
	Write *bool `json:"write,omitempty"`
}

func (o One) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *One) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *One) GetRead() *bool {
	if o == nil {
		return nil
	}
	return o.Read
}

func (o *One) GetWrite() *bool {
	if o == nil {
		return nil
	}
	return o.Write
}

type UpdateConsentRequestResourcesType string

const (
	UpdateConsentRequestResourcesTypeMapOfMapOf1 UpdateConsentRequestResourcesType = "mapOfMapOf1"
	UpdateConsentRequestResourcesTypeTwo         UpdateConsentRequestResourcesType = "2"
)

type UpdateConsentRequestResources struct {
	MapOfMapOf1 map[string]map[string]One `queryParam:"inline" name:"resources"`
	Two         *Two                      `queryParam:"inline" name:"resources"`

	Type UpdateConsentRequestResourcesType
}

func CreateUpdateConsentRequestResourcesMapOfMapOf1(mapOfMapOf1 map[string]map[string]One) UpdateConsentRequestResources {
	typ := UpdateConsentRequestResourcesTypeMapOfMapOf1

	return UpdateConsentRequestResources{
		MapOfMapOf1: mapOfMapOf1,
		Type:        typ,
	}
}

func CreateUpdateConsentRequestResourcesTwo(two Two) UpdateConsentRequestResources {
	typ := UpdateConsentRequestResourcesTypeTwo

	return UpdateConsentRequestResources{
		Two:  &two,
		Type: typ,
	}
}

func (u *UpdateConsentRequestResources) UnmarshalJSON(data []byte) error {

	var mapOfMapOf1 map[string]map[string]One = map[string]map[string]One{}
	if err := utils.UnmarshalJSON(data, &mapOfMapOf1, "", true, nil); err == nil {
		u.MapOfMapOf1 = mapOfMapOf1
		u.Type = UpdateConsentRequestResourcesTypeMapOfMapOf1
		return nil
	}

	var two Two = Two("")
	if err := utils.UnmarshalJSON(data, &two, "", true, nil); err == nil {
		u.Two = &two
		u.Type = UpdateConsentRequestResourcesTypeTwo
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateConsentRequestResources", string(data))
}

func (u UpdateConsentRequestResources) MarshalJSON() ([]byte, error) {
	if u.MapOfMapOf1 != nil {
		return utils.MarshalJSON(u.MapOfMapOf1, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateConsentRequestResources: all fields are null")
}

type UpdateConsentRequest struct {
	Resources UpdateConsentRequestResources `json:"resources"`
	// Whether consent is being granted (true) or denied/revoked (false)
	Granted bool `json:"granted"`
}

func (o *UpdateConsentRequest) GetResources() UpdateConsentRequestResources {
	if o == nil {
		return UpdateConsentRequestResources{}
	}
	return o.Resources
}

func (o *UpdateConsentRequest) GetGranted() bool {
	if o == nil {
		return false
	}
	return o.Granted
}
